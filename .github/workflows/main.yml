# Workflow name that appears in GitHub Actions UI
name: Deploy to Hostinger
# Define when this workflow will run
on:
  push:
    branches: [ master ]  # Trigger on pushes to master branch
  workflow_dispatch:      # Allow manual triggering from GitHub UI
# Jobs define the actual work to be performed
jobs:
  build-and-deploy:       # A single job that handles both building and deploying
    runs-on: ubuntu-latest  # This job runs on a fresh Ubuntu virtual machine
    
    steps:  # Sequential steps to execute within the job
    # Step 1: Clone your repository code to the workflow runner with full history and no caching
    - name: Checkout repository
      uses: actions/checkout@v3  # Standard GitHub action to fetch code
      with:
        fetch-depth: 0  # Fetch all history to ensure we have the latest changes
    
    # Step 2: Force update from remote to ensure latest code
    - name: Force fetch latest code
      run: |
        git fetch --all
        git reset --hard origin/master
    
    # Step 3: Clear any build caches that might prevent latest changes from being included
    - name: Clear build caches
      run: |
        rm -rf ./node_modules/.vite || true
        rm -rf ./node_modules/.cache || true
        
    # Step 4: Set up the Node.js environment for building your React app
    - name: Set up Node.js
      uses: actions/setup-node@v3  # Official GitHub action for Node.js
      with:
        node-version: '18'  # Specific Node.js version to use
        
    # Step 5: Install all dependencies defined in package.json with clean install
    - name: Install dependencies
      run: npm ci  # Clean install instead of npm install
      
    # Step 6: Build your React app for production
    - name: Build project
      run: npm run build  # Regular build - no additional flags needed
      env:
        VITE_TMDB_API_KEY: ${{ secrets.VITE_TMDB_API_KEY }}  # Access secure environment variable
        VITE_BUILD_TIMESTAMP: ${{ github.run_id }}  # Add timestamp to force cache invalidation
        
    # Step 7: Diagnostic step to verify build output exists
    - name: List build directory content
      run: ls -la dist/  # Shows all files that will be deployed
      
    # Step 8: Debug information for troubleshooting connection issues
    - name: Debug FTP connection
      run: |
        echo "Attempting to connect to FTP server using IP address"
        echo "Using username ${{ secrets.FTP_USERNAME }}"
        echo "With standard FTP port 21"
        
    # Step 9: Deploy built files to your Hostinger hosting via FTP
    - name: Deploy to Hostinger
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.CLOUDHOST_SERVER }}
        username: ${{ secrets.CLOUDHOST_USERNAME }}
        password: ${{ secrets.CLOUDHOST_PASSWORD }}
        port: 21
        local-dir: ./dist/  # Make sure this matches your build output directory
        server-dir: /public_html/
        log-level: verbose
        dangerous-clean-slate: true  # Changed to true to force complete refresh
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
